---
name: CI
on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    # Run at 06:10 on Sunday
    - cron: "10 6 * * 0"

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
      - name: Run the sh-checker
        uses: luizm/action-sh-checker@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHELLCHECK_OPTS: --color=always
          SHFMT_OPTS: -s
          _CONTAINERS_USERNS_CONFIGURED: ""
        with:
          sh_checker_comment: true

  build:
    name: Build
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - aarch64
          - x86_64
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Make directory
        run: mkdir -p ~/.config/containers

      - name: Configure /etc/containers/containers.conf
        run: |
          echo '
          [containers]
          netns="host"
          userns="host"
          ipcns="host"
          utsns="host"
          cgroupns="host"
          cgroups="disabled"
          log_driver = "k8s-file"
          [engine]
          cgroup_manager = "cgroupfs"
          events_logger="file"
          runtime="crun"
          ' | sudo tee /etc/containers/containers.conf

      - name: Configure /etc/containers/containers.conf permissions
        run: sudo chmod 644 /etc/containers/containers.conf

      - name: Configure ~/.config/containers/containers.conf
        run: |
          echo '
          [containers]
          volumes = [
            "/proc:/proc",
          ]
          ' | tee ~/.config/containers/containers.conf

      - name: Configure storage
        run: sudo sed -i -e 's|^#mount_program|mount_program|g' -e '/additionalimage.*/a "/var/lib/shared",' -e 's|^mountopt[[:space:]]*=.*$|mountopt = "nodev,fsync=0"|g' /etc/containers/storage.conf

      - name: Create files / directories
        run: |
          sudo mkdir -p /var/lib/shared/overlay-images /var/lib/shared/overlay-layers /var/lib/shared/vfs-images /var/lib/shared/vfs-layers;
          sudo touch /var/lib/shared/overlay-images/images.lock;
          sudo touch /var/lib/shared/overlay-layers/layers.lock;
          sudo touch /var/lib/shared/vfs-images/images.lock;
          sudo touch /var/lib/shared/vfs-layers/layers.lock

      - name: Configure UID
        run: echo $(id -u):10000:5000 | sudo tee -a /etc/subuid
      - name: Configure GID
        run: echo $(id -g):10000:5000 | sudo tee -a /etc/subgid
      - name: Fix newuidmap permissions
        run: sudo chmod 4755 /usr/bin/newuidmap
      - name: Fix newgidmap permissions
        run: sudo chmod 4755 /usr/bin/newgidmap
      - name: Update podman
        run: podman system migrate

      - name: Build the image with Buildah
        run: |
          podman run \
            --rm \
            --arch arm64 \
            --device /dev/fuse:rw \
            --security-opt label=disable --security-opt seccomp=unconfined \
            --privileged \
            --userns keep-id \
            -w /home/build \
            -u build \
            -v ${{ github.workspace }}:/home/build:Z \
            -v ~/.local/share/containers:/home/build/.local/share/containers \
            quay.io/buildah/stable:latest \
            buildah unshare /home/build/build.sh -a ${{ matrix.arch }}
        if: ${{ matrix.arch == 'aarch64' }}

      - name: Build the image with Buildah
        run: |
          podman run \
            --rm \
            --arch amd64 \
            --device /dev/fuse:rw \
            --security-opt label=disable --security-opt seccomp=unconfined \
            --privileged \
            --userns keep-id \
            -w /home/build \
            -u build \
            -v ${{ github.workspace }}:/home/build:Z \
            -v ~/.local/share/containers:/home/build/.local/share/containers \
            quay.io/buildah/stable:latest \
            buildah unshare /home/build/build.sh -a ${{ matrix.arch }}
        if: ${{ matrix.arch == 'x86_64' }}

      - name: Tag the image for Fedora 34
        run: podman tag localhost/picocom localhost/picocom:34

      - name: Export the image
        run: podman image save --format oci-archive -o picocom-${{ matrix.arch }}.tar localhost/picocom

      - uses: actions/upload-artifact@v2
        with:
          name: picocom-${{ matrix.arch }}
          path: picocom-${{ matrix.arch }}.tar

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        arch:
          - aarch64
          - x86_64
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - uses: actions/download-artifact@v2
        with:
          name: picocom-${{ matrix.arch }}

      - name: Load the image
        run: podman image load -i picocom-${{ matrix.arch }}.tar

      - name: Create a container and start the OpenSSH server using the image
        run: podman run --rm --name test-container -it localhost/picocom picocom --help

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Create a manifest
        run: buildah manifest create picocom-multiarch:latest

      # aarch64
      - uses: actions/download-artifact@v2
        with:
          name: picocom-aarch64

      - name: Load the aarch64 image
        run: podman image load -i picocom-aarch64.tar

      - name: Add the aarch64 image to the manifest
        run: buildah manifest add picocom-multiarch:latest localhost/picocom

      # x86_64
      - uses: actions/download-artifact@v2
        with:
          name: picocom-x86_64

      - name: Load the x86_64 image
        run: podman image load -i picocom-x86_64.tar

      - name: Add the x86_64 image to the manifest
        run: buildah manifest add picocom-multiarch:latest localhost/picocom

      - name: Push latest manifest and images to quay.io
        run: buildah manifest push --rm --all --creds jwillikers+publisher:${{ secrets.REGISTRY_PASSWORD }} picocom-multiarch:latest docker://quay.io/jwillikers/picocom
